% Perl 6 Tablets Appendix G - Glossary

Here you find short explanations to most of the computer science terms,
used in the tablets. These contain also links to specific syntax details,
that relate to that term. Thatswhy this page is the ideal entry point for
questions like: "Can I do *functional programming* in Perl 6?" or
"What kind of *iterators* are present and how they are spelled?"

**Navigation:** [A](#a) [B](#b) [C](#c) [D](#d) [E](#e)
[F](#f) [G](#g) [H](#h) [I](#i) [J](#j) [K](#k) [L](#l)
[M](#m#) [N](#n) [O](#o) [P](#p) [Q](#q) [R](#r) [S](#s)
[T](#t#) [U](#u) [V](#v) [W](#w) [X](#x) [Y](#y) [Z](#z)


# A

<a id="ALAP"/>
**ALAP** *(as late as possible)* &mdash; within a given execution phase
([compile time](#compile-time) or [run time](#run-time))

<a id="ASAP"/>
**ASAP** *(as soon as possible)* &mdash; within a given execution phase
(*[compile time](#compile-time)* or [run time](#run-time))

<a id="AST"/>
**AST** *(abstract syntax tree)* &mdash; tree like data structure, in which
source code is transformed, before running the programm


# B

<a id="backtracking"/>
**backtracking** &mdash;
after a part of a pattern didn't match,
this last operation might not be counted (undone) and the pointer
for the position in the string where actual matching is taking place
is going a few steps to the left (it goes back)

<a id="binding"/>
**[binding](tablet-3-variables#binding)** &mdash;
making two variables share the same content by pointing to same
memory location

<a id="block"/>
**block** &mdash;
syntactically just a piece of code inside curly brackets
(**{}**), when [evaluated](#evaluation) it becomes an
object of the type **[Block](appendix-a-index.html#block-type)**

# C

<a id="capture"/>
**capture** &mdash;

<a id="closure"/>
**closure** &mdash;
routines whose state (content of all local variables) is
completely preserved until the next execution,
mostly used as a fancy alias for a *[block](#block)*

<a id="coderef"/>
**coderef** &mdash;
reference (pointer) to an executable block of code (routine)

<a id="compilation"/>
**compilation** &mdash;
reading the human written source code and make it an
executable (piece of) program

<a id="compile-time"/>
**compile time** &mdash;
time when Perl converts source code to executable form (bytecode),
is always before *[runtime](#runtime)*
even if code can be compiled via **[eval](appendix-a-index.html#eval)** and
**[evalfile](appendix-a-index.html#evalfile)** when the program is
already runnung, to run code at the begin of compile time use
**[BEGIN](appendix-a-index.html#begin-phaser)** and
**[CHECK](appendix-a-index.html#check-phaser)** to run at the end of
compile time for that unit (mostly the file or the to be **eval**ed string)

<a id="context"/>
**context** &mdash;
when executing a function or operator Perl considers the
expression from which the call was to return a
[scalar](#scalar-type) or other kind of result

<a id="context-variable"/>
**context variable** &mdash;
name for **[$\_](appendix-a-index.html#context-var)**,
which is used by built in Perl functions as an implicit
parameter and as memory of the last result

<a id="currying"/>
**currying** &mdash;
creating a *[subroutine](routine)* that calls another with certain
*[parameter](#parameter)* to be predefined


# D

<a id="declarative-programming"/>
**declarative programming** &mdash; programming paradigm that expresses the
logic of a computation without describing its control flow

<a id="design-by-contract"/>
**design by contract** &mdash; programming style in which parameters and
return values from routines must meet conditions; A signature is
considered contract in Perl 6


# E

<a id="evaluation"/>
**evaluation** &mdash;
executing a piece of program, before that all
variables will be replaced with their content

# F

<a id="functional-programming"/>
**functional programming** &mdash;
exclusively function based programming
style, [strongly supported](appendix-d-delta.html#functional-programming)
by Perl 6, considered as a branch of Declarative Programming

# G

# H

# I

<a id="iteration"/>
**iteration** &mdash;
repeated executing of a term or *[block](#block)*, enforced by
[iterators](appendix-b-grouped.html#Loops)

# J

<a id="junction"/>
**junction** &mdash; a type of value that holds a logical combination of
several values, example: (A and B) or C, creat them with 
[junctive ops](tablet-4-operators.html#)

# K

# L

<a id="list-contex"/>
**list context** &mdash;

<a id="LTM"/>
**LTM** *(longest token matching)* &mdash;
when searching a pattern with alternatives (sub|substr)
the search will continue after finding the pattern 'sub'
because of looking for the longest alternative

# M

<a id="metaoperator"/>
**[metaoperator](appendix-b-grouped.html#metaoperators)** &mdash;
operators that alter the meaning of other normal operators

<a id="metaprogramming"/>
**metaprogramming** &mdash;

# N

<a id="named-parameter"/>
**named parameter** &mdash;

<a id="numeric-context"/>
**numeric context** &mdash;

# O

<a id="OOP"/>
**OOP** *(object oriented orogramming)* &mdash;
programming paradigm (style), that arranges data and functions
that belong together into so called objects


# P

<a id="OOP"/>
**parameter** &mdash;
value passed to a method or *[subroutine](routine)*,
mostly as part of the signature

<a id="parsetree"/>
**parsetree** &mdash;
hierarchical data representing the logical structure
of a program, also called *[AST](#AST)*

<a id="phaser"/>
**[phaser](appendix-b-grouped.html#closure-traits)** &mdash;
Perl 6 term for specially named subblocks withe special runtimes
aka closure traits &mdash;
example: **[BEGIN](appendix-a-index.html#BEGIN-phaser)**

<a id="pipe"/>
**pipe** &mdash; connection between 2 processes, move data (mostly only in
one direction) without buffering

<a id="POD"/>
**[POD](tablet-2-basic-syntax.html#pod)**
*(Plain Old Documentation)* &mdash; 
a markup language to embeded  documentation into Perl source code,
has in Perl 6 the ability to store data into special variables 
like **[\$=pod](appendix-a-index.html#pod-pod-var)** to be retrieved later

<a id="pointy-block"/>
**pointy block** &mdash;
a block that is given readonly *[parameters](parameter)* with
**[-\>](appendix-a-index.html#arrow-op)** or rw parameters with
**[<-\>](appendix-a-index.html#lower-minus-greater-op)**

<a id="property"/>
**property** &mdash; metadata of a variable set at runtime

# Q

# R

<a id="reference"/>
**reference** &mdash;
address of data in memory, often termed a capture in Perl 6

<a id="regular-expression"/>
**regular expression** &mdash; in Perl5: pattern matching notation, either
regex, token or rule in Perl6

<a id="routine"/>
**routine** &mdash;
block of code callable by name,
can have a *[signature](#signature)* and a return type,
objects of the type **[SoftRoutine](appendix-a-index.html#softroutine-type)**
and **[HardRoutine](appendix-a-index.html#hardroutine-type)**

<a id="run-time"/>
**run time** &mdash; time when execution hits a certain part of the program,
after *[compile time](#compile-time)*


# S

<a id="scope"/>
**scope** &mdash;
area within which an identifier (like a variable) is usable,
normally the current [block](#block)

<a id="sigil"/>
**sigil** &mdash; character that serves as a prefix to categorize the
following name, most prominent in Perl are the variable
[sigils](appendix-b-grouped.html#sigils)
: **[$](appendix-a-index.html#dollar-sigil)**,
**[@](appendix-a-index.html#at-sigil)** and
**[%](appendix-a-index.html#percent-sigil)**

<a id="signature"/>
**signature** &mdash; function parameters (left-hand side of a binding),
surrounded by round parentheses

<a id="slang"/>
**slang** &mdash;
sublanguages of Perl 6, their grammar is mostly stored
in [special variables](appendix-b-grouped.html#special-variables)
with the [twigil](#twigil) \~, such as
**[\$\~Regex](appendix-a-index.html#regex-lang-var)** or
**[\$\~MAIN](appendix-a-index.html#main-lang-var)** (main language),
you can change or alter them with this keyword by using the
**[augment](appendix-a-index.html#augment)**
or **[supersede](appendix-a-index.html#supersede)** command


<a id="slice"/>
**slice** &mdash;
part of an array or list

<a id="slurpy array"/>
**slurpy array** &mdash;
array parameter that receives all (slurps) all optional
*[subroutine](#routine)* arguments

<a id="subroutine"/>
**subroutine** &mdash; much used, Perl 5-ish term for [routine](#routine)

# T

<a id="topicalizer"/>
**topicalizer** &mdash;
every keyword that sets the **[$\_](appendix-a-index.html#context-var)**
variable, like *[given](appendix-a-index.html#given)*
and *[for](appendix-a-index.html#for)*

<a id="yadda-operator"/>
**trait** &mdash;
additional property of a variable, defined at *[compile time](#compile-time)*,
see **[but](appendix-a-index.html#but)**, what other languages call
*trait* Perl calls [role](#role)

<a id="yadda-operator"/>
**[twigil](appendix-b-grouped.html#twigils)** &mdash;
second(ary) *[sigil](#sigil)* indicating a
special property of a variable


# U

# V

# W

# X

# Y

<a id="yadda-operator"/>
**[yadda operator](operators.html#yadda)** &mdash;
placeholder for later to be written code, because in empty
routines are forbidden, comes in 3 flavours:
**[...](appendix-a-index.html#triple-dot-yadda-op)**,
**[???](appendix-a-index.html#triple-question-mark)** and
**[!!!](appendix-a-index.html#triple-exclamation-mark)**

# Z
